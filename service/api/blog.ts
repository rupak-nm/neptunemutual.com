/* ----------------------------------------- */
// Do not edit this file
/* ----------------------------------------- */

import { Api } from '../../types/enum'
import { getApi } from './'

const getPaginatedByTags = async (api: Api, pageSize: number = 12): Promise<Array<PaginatedByTagsResult<Article>>> => {
  try {
    const { docs } = await getApi<Article>(api)

    const allTags = docs.map((doc: Article) => doc.tags).flat()
    const uniqueTags = [...new Map(allTags?.map((tag: any) => [tag.id, tag])).values()]

    const result = uniqueTags.map((tag: any) => {
      const filteredDocs = docs?.filter((doc: any) => {
        const matchedTag = doc.tags.find((x: any) => x.slug === tag.slug)
        return matchedTag
      })

      const records = filteredDocs.length
      const totalPages = Math.ceil(records / pageSize)

      const _result: PaginatedByTagsResult<Article> = {
        tag,
        records,
        totalPages,
        pageSize,
        pages: {
        }
      }

      for (let i = 0; i < totalPages; i++) {
        const prop = (i + 1).toString()
        const start = i * pageSize
        const end = start + pageSize <= records ? start + pageSize : records

        _result.pages[prop as keyof PaginatedByTagsResult<Article>] = filteredDocs.slice(start, end)
      }

      return _result
    })

    return result
  } catch (error) {
    console.error(error)
  }

  return []
}

export { getPaginatedByTags }
