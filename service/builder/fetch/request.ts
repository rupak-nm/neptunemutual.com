/* ----------------------------------------- */
// Do not edit this file
/* ----------------------------------------- */

import http from 'http'
import https from 'https'

import { getApiHeaders } from './headers'

const get = async (url: string, identifier: string, headers = getApiHeaders()): Promise<{ url: string, identifier: string, string: string }> => {
  const urlObj = new URL(url)
  console.log('Requesting: %s: %s', identifier, url)

  const httpCore = urlObj.protocol === 'http:' ? http : https

  return await new Promise((resolve, reject) => {
    const options: http.ClientRequestArgs = {
      method: 'GET',
      port: urlObj.port,
      hostname: urlObj.hostname,
      path: urlObj.pathname + urlObj.search,
      headers: {
        ...headers
      }
    }

    const req = httpCore.request(options, (res) => {
      // reject on bad status
      if ((res.statusCode !== undefined) && (res.statusCode < 200 || res.statusCode >= 300)) {
        console.log('Failed: %s', identifier)
        return reject(new Error(`Status code ${res.statusCode}`))
      }

      // cumulate data
      const chunks: any[] = []

      res.on('data', (chunk) => {
        chunks.push(chunk)
      })

      res.on('end', () => {
        try {
          const body = Buffer.concat(chunks)
          const string = body.toString()

          console.log('Success: %s', identifier)
          resolve({ url, identifier, string })
        } catch (error) {
          console.log('Failed: %s', identifier)
          reject(error)
        }
      })

      res.on('error', (error) => {
        console.error(error)
      })
    })

    req.on('error', (error) => {
      console.log('Failed: %s', identifier)
      reject(error)
    })

    // important: end the request
    req.end()
  })
}

export { get }
