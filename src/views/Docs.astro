---
import { parseContent } from "../../util/content-viewer";
import { normalize } from "../../util/css-class";
import { slugify } from "../../util/slug";
import * as processor from "../../util/html-processor";
import Input from "../elements/Input.astro";
import Icon from "../elements/Icon.astro";
import Breadcrumb from "../elements/Breadcrumb.astro";
import Enumerable from "linq";

interface Props {
  items: Documentation[];
  page: Documentation;
}

const { items, page } = Astro.props;

const getSlug = (x: Documentation) =>
  x.parent ? `${x.parent.slug}/${x.slug}` : x.slug;

const slug = getSlug(page);

const [next] = Enumerable.from(items)
  .where((x) => x.order > page.order && !x.unlinked)
  .orderBy((x) => x.order)
  .take(1)
  .toArray();

const [previous] = Enumerable.from(items)
  .where((x) => x.order < page.order && !x.unlinked)
  .orderByDescending((x) => x.order)
  .take(1)
  .toArray();

const html = await processor.process(page.html);

const breadcrumbs = [
  {
    name: "Docs",
    link: "/docs",
  },
  page.parent && {
    name: page.parent.navigationLabel,
  },
  {
    name: page.title,
    link: slug,
  },
].filter(Boolean);
---

<div class="docs content menu">
  <button>
    <p>Content Menu</p>
    <Icon variant={"chevron-right"} size={"lg"} />
  </button>
</div>

<div class="documentation container">
  <div class="full width container">
    <div class="initially hidden dimmer sidebar"></div>
    <div class="ui sidebar menu" data-open="false">
      {
        items.map((item) => {
          const itemSlug = item.parent
            ? `${item.parent.slug}/${item.slug}`
            : item.slug;

          return item.unlinked ? (
            <div
              class={normalize(
                `${itemSlug === slug ? "current" : ""} header item`
              )}
            >
              {item.navigationLabel}
            </div>
          ) : (
            <a
              class={normalize(`${itemSlug === slug ? "current" : ""} item`)}
              href={`/docs/${itemSlug}/`}
            >
              {item.navigationLabel}
            </a>
          );
        })
      }
    </div>

    <div class="story container">
      <div class="meta">
        <Breadcrumb items={breadcrumbs} />
        <div class="script only search">
          <Input
            type={"search"}
            id="SearchInputSearch"
            placeholder="Search ..."
          />
        </div>
      </div>
      <div class="story">
        <h1 class="ui header" id={slugify(page.title)}>
          <div class="title">{page.title}</div>
          {page.subtitle && <div class="sub title">{page.subtitle}</div>}
        </h1>
        <div class="content" set:html={html} />
      </div>

      <div class="ui more stories">
        {
          previous && (
            <a href={`/docs/${getSlug(previous)}/`} class="previous story">
              <Icon size={"xl"} variant={"arrow-left"} />
              <div class="content">
                <div class="title">Previous</div>
                <div class="sub title">{previous.title}</div>
              </div>
            </a>
          )
        }
        {
          next && (
            <a href={`/docs/${getSlug(next)}/`} class="next story">
              <div class="content">
                <div class="title">Next</div>
                <div class="sub title">{next.navigationLabel}</div>
              </div>
              <Icon size={"xl"} variant={"arrow-right"} />
            </a>
          )
        }
      </div>
    </div>
  </div>
</div>

<div class="initially hidden search dimmer">
  <div class="ui search modal">
    <div class="search header input">
      <Icon size={"xl"} variant={"search-lg"} />
      <input
        type="search"
        placeholder="Search the Documentation"
        id="ModalSearchInputSearch"
      />
    </div>

    <div class="search result"></div>
  </div>
</div>
